Configuración Git: para usar git lo primero es usar el comando git config --global user.name "Pablo" y user.email "pablo7me2000@gmail.com. Con esto ponemos en el archivo de
configuración de git el nombre de usuario y el email para poder hacer usar todos los comandos de git.

Ramas en git: es una línea del tiempo alternativa del proyecto, donde haces cambios sin afectar a la rama principal. La rama principal se suele llamar main o master.
Las ramas sirven para:
-Desarrollar nuevas funcionalidades sin romper código que ya funciona.
-Probar ideas o experimentos.
-Colaborar en equipo sin pisar el trabajo de otros.
-Corregir errores sin alterar el trabajo en curso.

Git log
Opciones útiles:
-git log --oneline: muestra los commit de forma resumida.
-git log --graph: muestra un gráfico de las ramas y fusiones.
-git log -p: muestra los cambios linea por linea.
-git log nombre_archivo: muestra los commit que afectaron al archivo en específico.

Git status
Cuando se usa:
-Antes de hacer un git add o git commit, para ver que cambio.
-Para no olvidar ningún archivo importante.
-Para revisar si estas en la rama correcta.
-Para ver si hay conflictos durante un merge.

Git reset
Ejemplos
-git reset --soft HEAD~1: deshace el último commit pero conserva los cambios.
-git reset HEAD~1: deshace el último commit y saca los archivos del área de preparación (mantiene los cambios en el disco).
-git reset --hard HEAD~1: elimina todo commit y cambios del disco. (sin recuperación).
-git reset nombre_archivo: quita archivos del área de preparación (como si nunca hubieras hecho git)

IMPORTANTE: git reset --hard: elimina los cambios sin pasar por la papelera. Usar si se esta 100% seguro.

Git diff
Uso:
-Revisa tu código antes de hacer un commit.
-Ver exactamente que has cambiado en un archivo.
-Comparar ramas o resolver conflictos.

Git reset --hard:
Uso:
-Para volver al repositorio a un estado anterior y eliminar todos los cambios hechos desde ese punto. Incluyendo:
-Commit.
-Archivos en preparación.
-Y cambios no guardados en tus archivos locales.

Git reflog:
importante: Git reflog te da una oportunidad para recuperar algo pero no es infalible. Los registros del reflog se pueden perder después de haber pasado un tiempo asi que 
si hay que usar git reflog usarlo cuanto antes.

Git tag: por defecto las etiquetas no se suben automaticamente a un repositorio remoto al hacer un git push. Hay que enviarlas:
-git push origin v1.0.
-git push --tags.