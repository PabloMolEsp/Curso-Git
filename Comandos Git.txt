1. Git init: se usa para inicializar un nuevo repositorio de Git en mi proyecto. Es como decirle a Git que quiero llevar un control de versiones en esa carpeta.

2. Git add: se usa para preparar archivos para hacer un commit al historial de repositorios. Mueve los cambios que hiciste al area de preparación, como una zona
de espera antes de hacer un git commit. Es como decirle a git que los cambios que estoy haciendo me interesan y que los incluya en el proximo commit.

git add nombre_archivo : agrega el archivo en específico.
git add .: agrega todos los archivos y carpetas a la espera en el directorio actual.
git add -A: agrega todos los cambios (incluyendo los archivos eliminados).

3. Git commit: se usa para guardar un punto en el historial del proyecto, guardando los cambios que has preparado en el git add. Es como decir que estoy listo para guardar
los cambios que he ido haciendo.
Resumen:
git add: selecciono los cambios que quiero guardar.
git commit: guarda los cambios con un mensaje.
Un commit contiene:
-Los cambios realizados.
-El autor y la fecha del commit.
-Un mensaje descriptivo.
-Un identificador único (hash).

4. Git log: sirve para ver el historial de commit de un repositorio de Git.
Muestra una lista de todos los commit que se han hecho, con detalles como:
-Hash (id único) del commit.
-Autor del commit.
-Fecha del commit.
-Mensaje del commit.

5. Git status: muestra el estado actual del repositorio. Como una fotografía del momento, te dice que archivos han cambiado, cuales estan listos para commit y cuales no.
Cuando utilizas git status, puedes ver:
-Archivos que ya agregaste con git add (listos para commit)
-Archivos que has cambiado pero aún no has agregado.
-Archivos nuevos no rastreados por Git todavía.
-Si estas en medio de una fusión (merge) también te lo dice.

6. Git checkout: sirve para cambiar de rama o restaurar archivos o commits anteriores.
Uso más comunes:
-Cambiar de rama: git checkout nombre-de-la-rama.
-Crear y cambiar una nueva rama: (version recomendada git switch -c).
-Restaurar archivos en su estado anterior (antes del último commit).
Se recomienda usar
-git switch para cambiar de rama.
-git restore para restaurar archivos.

7. Git reset: es un comando poderoso y delicado. Sirve para deshacer cambios en distintos niveles, dependiendo de como se use.
Para que se usa git reset:
-Para deshcer commit.
-Sacar archivos del área de preparación.
-Mover el puntero de la rama actual a otro commit.

8. Git alias:
-Se usa para crear comandos cortos y fáciles de recordar.
-Acelerar tu flujo de trabajo.
-Ahorrar tiempo.
Ejemplo:
-git config --global alias.st status. Creamos el alias
-git st. Ahora para usar el comando git status usamos git st.
-git status.
Estos alias se guardan en el archivo de configuración .gitconfig.

9. Git diff:
-Líneas que han cambiado desde el último commit. Ejemplo: git diff
-Diferencia entre ramas, commits o versiones. Ejemplo: git diff rama1 rama2. git diff commit1 commit2 
-Cambios que has hecho pero no has agregado con git add. Ejemplo: git diff nombre_archivo
-Que esta en área de preparación comparado con el último commit. Ejemplo: git diff --staged

10. Git reset --hard: poderoso pero destructivo hay que tener cuidado al usarlo.
Resumen: revierte todo y lo limpia como si no se hubiera hecho nada.
Ejemplo: git reset --hard HEAD~1.
-Mueve el puntero a un commit anterior.
-Borra el commit más reciente.
-Borra los cambios en el disco.

11. Git reflog: Cuando has hecho un git reset --hard  y quieres deshacerlo o para ver el historial de las referencias en tu repositorio.
Git reflog guarda todos los movimientos de tu puntero HEAD, todo lo que se hace en el repositorio.
¿cuando es útil?
-Para recuperar commits perdidos después de un reset, rebase o checkout erróneo.
-Ver el historial completo de HEAD, incluyendo acciones locales.
-Restaurar ramas o commits eliminados accidentalmente.

12. Git tag: se usa para crear etiquetas o marcas en puntos específicos del historial de tu repositorio, generalmente para señalar versiones importantes o hitos del proyecto.
Uso:
-Marcar un commit específico.
-Crear versiones de software.
-Tener referencias fáciles a puntos claves del historial del proyecto.

13. Git branch: comando fundamental para trabajar con ramas en git y clave para gestionar el desarrollo en paralelo, características, correciones y versiones del código.
Uso:
-Crear nuevas ramas para desarrollar nuevas características o hacer cambios sin afectar al código principal.
-Ver ramas existentes en el repositorio.
-Eliminar ramas innecesarias.
-Cambiar de una rama a otra.
Ejemplos:
-Ver ramas existentes: git branch.
-Crear nueva rama: git branch nombre_rama.
-Cambiar rama: git checkout nombre_rama. Forma moderna (git switch nombre_rama).
-Crear nueva rama y cambiar a ella: git checkout -b nombre_rama. Forma moderna(git switch -c nombre_rama).
-Eliminar una rama: git branch -d nombre_rama.

14. Git switch: sirve para facilitar y hacer más claro el cambio entre ramas.
Uso: se usa para cambiar de rama en tu repositorio de manera más sencilla y clara que git checkout.  
Ejemplo: 
Cambiar a una rama existente: git switch nombre_rama.
Crear una nueva rama y cambiar a ella al momento: git switch -c nombre_rama.
Cambiar a una rama previamente usada: git switch -.


